Vue가 DOM을 업데이트 하는 방법

Vue는 화면 전체가 아닌 변화가 일어난 부분만 업데이트 한다
가상 DOM이라는 개념을 통해 Vue가 이 작업을 수행

Vue Instance			================>			Browser DOM

이때 HTML 콘텐츠는 브라우저를 통해 렌더링된다
사용자들은 해당 콘텐츠를 화면에서 확인할 수 있음

Stores data, computed						 	Vue-controlled template is  
properties, methods, ...						 	rendered in the DOM

Vue 앱, Vue 인스턴스는 데이터와					브라우저 DOM은 Vue가 제어하는
연산 프로퍼티, 메서드 등을 저장						템플릿을 DOM에 렌더링
											해당 템플릿의 콘텐츠가 DOM에 렌더링되는 것

Vue가 제어하는 렌더링 프로세스 중에 동적 부분과 플레이스 홀더 보간, 바인딩이 제거되며 실제 값이 삽입된다

title: 'Hello!',									<h2>Hello!</h2>
text: 'Not the title'								<p>Not the title</p>

보간을 통해 데이터를 출력하면 화면에는 Browser DOM과 같이 보이게 된다

Data and computed properties						updates should be reflected, 
may change (e.g. because of user input)				but Vue should not re-render everything

사용자가 무언가 입력하거나 버튼을 클릭한 경우 해당 업데이트 또한 반영되어야 함
이 때, Vue는 전체 페이지를 업데이트 하는 것이 아니라 변경 사항이 있는 부분에 대해서만 업데이트 진행
Vue가 전체 페이지에 대한 재평가 및 리렌더링을 진행하면 단순한 텍스트 변화만으로도 성능이 저하될 수 있기 때문 

title: 'Hi there!',									<h2>Hi there!</h2>
text: 'Not the title'								<p>Not the title</p>

title만 변경되었으므로 <h2> 태그 문단에 대한 업데이트만 이루어진다

How Vue Updates Part of the DOM
>>> Use the Virtual DOM

가상 DOM이란 실제 DOM의 가상 복사본인데, 전적으로 JavaScript가 관리하므로 JS 기반 DOM이고, 메모리에 위치한다
JavaScript 객체의 집합 > { el: 'h2', child: 'Hello!' }, ...
Vue는 여기서 어떤 HTML 태그가 필요하며 해당 태그의 콘텐츠가 무엇인지를 기억한다
그리고 데이터에 업데이트가 발생하면 새로운 가상 DOM을 생성해서 새로운 가상 DOM과 기존 가상 DOM을 비교하여 두 가상 DOM 간 차이점만 실제 DOM에 쓰인다

비교하고 가상 DOM에 업데이트 하는 작업을 전적으로 메모리에서 수행하게 되면 화면 렌더링으로 이어지는 실제 DOM에서 해당 작업을 하는 것보다 훨씬 효율적이다

이것이 바로 Vue 내부에서 일어나는 일!
