Component Communication

OverView.
보통 여러 컴포넌트를 결합하여 사용자 인터페이스를 구축
컴포넌트의 좋은 점은 템플릿에 논리를 캡슐화해서 컴포넌트를 재사용 할 수도 있다는 점
예를 들어 목록 항목을 캡슐화 하는 컴포넌트가 있음
그 다음 컴포넌트는 자동으로 부모-자식 관계를 형성
컴포넌트 A의 템플릿에서 컴포넌트 B를 사용한다면, A는 B의 부모이고 B는 A의 자식이 된다
컴포넌트 B의 템플릿에 컴포넌트 C가 있는 경우, C는 B의 자식이자 일종의 A의 자식도 된다

Vue의 통신은 단방향 데이터 플로우★
일반적으로는 부모에서 자식으로만 데이터가 이동하고(props), 상위 컴포넌트로 데이터를 전달할 때는 다른 개념(custom event)을 사용한다

1. Props (parent >>> child)
프로퍼티를 사용해서 데이터를 부모에서 자식으로 전달 가능
데이터 전달 전 자식 컴포넌트에서 미리 프로퍼티를 정의해두어야 한다
수신하려는 프로퍼티를 알 수 있게 배열을 지정하거나 더 세부적으로 들어가서 어떤 유형의 데이터를 수신할 지, 프로퍼티 필수 유무 등을 Vue에 알려줄 수 있다

2. Custom Events (child >>> parent)
컴포넌트는 내장된 $emit 메서드로 상위 컴포넌트에 무언가를 알리거나, 부모 컴포넌트에 있는 코드나 메서드를 트리거 할 수 있음
커스텀 이벤트는 데이터를 가지고 이동할 수 있는데, 가령 사용자가 입력 필드에 입력한 데이터, 선택한 항목의 ID 또는 사용 사례에 필요한 어느 데이터든 보낼 수 있음

3. 이웃 간의 통신...?
만약 이웃 간의 통신이 필요할 경우, A 컴포넌트에서 부모 컴포넌트로 데이터를 보내고, B 컴포넌트는 부모 컴포넌트에서 해당 데이터를 받아와야 한다.
결국 부모-자식 간의 통신 밖에 되지 않음

4. provide / inject
때로 데이터나 커스텀 이벤트가 불필요하게 통과해야 하는 컴포넌트가 많이 있을 경우 사용하는 패턴
부모 컴포넌트에 데이터를 제공(provide)한 다음, 제공한 데이터를 모든 하위 컴포넌트에 삽입(inject)할 수 있음
꼭 필요한 경우에만 쓸 것!



